#!/usr/bin/env bash

if [ "$1" == "-h" ] || [ "$1" == "--help" ] || [ $# -lt 1 ]; then
    echo "This script generates a tiled thumbnail image from a video file."
    echo "Usage: $0 <video_file> [grid] [yes_no] [suffix]"
    echo ""
    echo "Arguments:"
    echo "  video_file: The input video file."
    echo "  grid   (optional if last): The number of tiles per row/column. Default is 4."
    echo "  yes_no (optional if last): Specify '-n' to skip processing if output file already exists. Default is '-y'."
    echo "  suffix (optional if last): A suffix to append to the output file name. input.png vs input-suffix.png, default is none."
    exit 1
fi

grid=${2:-4}
yes_no=${3:--y}

if [ -z "${4}" ]; then
    out_name="${1%\.*}".png
else
    out_name="${1%\.*}"-"${4}".png
fi

if [[ "$yes_no" == "-n" ]] && [[ -f ${out_name} ]]; then
    echo "skipping $1 $2 $3 $4"
    exit
fi

echo "         $1 $2 $3 $4"

frames=$(ionice -c 3 ffprobe -v error -select_streams v:0 -count_packets -show_entries stream=nb_read_packets -of csv=p=0 "${1}")
frames=${frames//,/}

# frames=$((grid * grid))  # to precisely only show the first g² frames

if [ "$frames" -lt $((grid * grid)) ]; then
    echo "too few frames $frames < $((grid * grid)) for file $1"
    few_folder="too_few_frames_grid=_$((grid * grid))_frames=${frames}"
    mkdir -p "$few_folder"
    mv -n "${1}" "$few_folder"
    exit 1
fi

framerate_ffmpeg=$(ffmpeg -i "$1" 2>&1 | sed -n "s/.*, \(.*\) fp.*/\1/p")
framerate=$(mediainfo "$1" --language=raw | sed -n "s/FrameRate\/String *: \([[:digit:]]\+\.[[:digit:]]\+\).*fps/\1/p" | head -n 1) # "FrameRate/String                 : 59.940 (59940/1000) fps"
                                                                                                                                    # "FrameRate/String                 : 59.830 fps"

skip_duration=0$(echo "(($frames - ($grid * $grid)) / ($grid * $grid + 1)) / $framerate"|bc -l)
n_th_frame=$(echo "scale=0; x = $frames / ($grid * $grid + 1) / ($framerate / $framerate_ffmpeg); if (x < 1) x = 1; x" | bc)
echo "skip_duration=$skip_duration grid=$grid frames=$frames n_th_frame=$n_th_frame framerate=$framerate framerate_ffmpeg=$framerate_ffmpeg"

# ffmpeg -hide_banner -loglevel error -stats -ss 00:00:10 -i "${1}" -frames 1 -vf "select=not(mod(n\,${n_th_frame})),scale=320:180,tile=${grid}x${grid}" "${out_name// /_}" -y </dev/null
nice -n 20 ionice -c 3 ffmpeg -hide_banner -loglevel error -stats -ss "$skip_duration" -i "./${1}" -frames 1 -vf "select=not(mod(n\,${n_th_frame})),scale=iw*min(1\, 2560/(iw*$grid)):ih*min(1\, 2560/(iw*$grid))/sar,tile=${grid}x${grid}" "./${out_name}" "${yes_no}" </dev/null
# ffmpeg                                   -ss     4212 -i "${1}"           -vf                                    scale=iw*sar    :  ih -frames:v 1 -q:v 2 out.jpg

logo_file="../clearlogo.png"
if [ -f "$logo_file" ]; then
    if [ -n "${4}" ] && [ "${4}" != "thumb" ]; then
        exit
    fi
    thumbnail="./${out_name}"

    margin_percent=20 # minimaler abstand als summe links/rechts und oben/unten, je nach seitenverhältnis der bilder

    # Berechne die Skalierungsfaktoren
    thumbnail_width=$(identify -format "%w" "$thumbnail")
    thumbnail_height=$(identify -format "%h" "$thumbnail")
    scaled_logo_width=0$(echo "$thumbnail_width * (100-$margin_percent) / 100" | bc -l)
    scaled_logo_height=0$(echo "$thumbnail_height * (100-$margin_percent) / 100" | bc -l)

    ionice -c 3 convert "$thumbnail" \( "$logo_file" -resize "${scaled_logo_width}x${scaled_logo_height}" \) -gravity "center" -composite "$thumbnail"
fi