#!/usr/bin/env bash

if [ "$1" == "-h" ] || [ "$1" == "--help" ] || [ $# -lt 1 ]; then
    echo "This script generates a tiled thumbnail image from a video file."
    echo "Usage: $0 <video_file> [grid] [yes_no] [suffix]"
    echo ""
    echo "Arguments:"
    echo "  video_file: The input video file."
    echo "  grid (optional): The number of tiles per row/column. Default is 8."
    echo "  yes_no (optional): Specify '-n' to skip processing if output file already exists. Default is '-y'."
    echo "  suffix (optional): A suffix to append to the output file name. If not provided, no suffix is added."
    exit 1
fi

grid=${2:-8}
yes_no=${3:--y}

if [ -z "${4}" ]; then
    out_name="${1%\.*}".png
else
    out_name="${1%\.*}"-"${4}".png
fi

if [[ "$yes_no" == "-n" ]] && [[ -f ${out_name} ]]; then
    echo "skipping $1 $2 $3 $4"
    exit
fi

echo "         $1 $2 $3 $4"

frames=$(ffprobe -v error -select_streams v:0 -count_packets -show_entries stream=nb_read_packets -of csv=p=0 "${1}")
frames=${frames//,/}
# echo frames:$frames
n_th_frame=$(echo \($frames - 240\) / \($grid \* $grid\) | bc)
# echo n_th_frame:$n_th_frame

# ffmpeg -hide_banner -loglevel error -stats -ss 00:00:10 -i "${1}" -frames 1 -vf "select=not(mod(n\,${n_th_frame})),scale=320:180,tile=${grid}x${grid}" "${out_name// /_}" -y </dev/null
nice -n 20 ffmpeg -hide_banner -loglevel error -stats -ss 00:00:10 -i "./${1}" -frames 1 -vf "select=not(mod(n\,${n_th_frame})),scale=iw*min(1\, 2560/(iw*$grid)):ih*min(1\, 2560/(iw*$grid))/sar,tile=${grid}x${grid}" "./${out_name}" "${yes_no}" </dev/null
# ffmpeg                                   -ss     4212 -i "${1}"           -vf                                    scale=iw*sar    :  ih -frames:v 1 -q:v 2 out.jpg

logo_file="../clearlogo.png"
if [ -f "$logo_file" ]; then
    if [ -n "${4}" ] && [ "${4}" != "thumb" ]; then
        exit
    fi
    thumbnail="./${out_name}"

    margin_percent=20 # minimaler abstand als summe links/rechts und oben/unten, je nach seitenverhÃ¤ltnis der bilder

    # Berechne die Skalierungsfaktoren
    thumbnail_width=$(identify -format "%w" "$thumbnail")
    thumbnail_height=$(identify -format "%h" "$thumbnail")
    scaled_logo_width=$(echo "$thumbnail_width * (100-$margin_percent) / 100" | bc -l)
    scaled_logo_height=$(echo "$thumbnail_height * (100-$margin_percent) / 100" | bc -l)

    convert "$thumbnail" \( "$logo_file" -resize "${scaled_logo_width}x${scaled_logo_height}" \) -gravity "center" -composite "$thumbnail"
fi