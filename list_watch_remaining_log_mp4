#!/usr/bin/env bash

disc_free.py

running=$(ls *.working 2>/dev/null|wc -l)
norming=$(ls *.log 2>/dev/null|wc -l)

remaining_mp4=$(ls *.mp4 2>/dev/null|wc -l)
remaining_mkv=$(ls *.mkv 2>/dev/null|wc -l)
remaining_ogg=$(ls *.ogg 2>/dev/null|wc -l)
remaining_webm=$(ls *.webm 2>/dev/null|wc -l)
remaining_opus=$(ls *.opus 2>/dev/null|wc -l)
remaining_m4a=$(ls *.m4a 2>/dev/null|wc -l)
remaining=$(($remaining_mp4 + $remaining_mkv + $remaining_ogg + $remaining_webm + $remaining_opus + $remaining_m4a))

done_mp4=$(ls normalized/*.mp4 2>/dev/null|wc -l)
done_mkv=$(ls normalized/*.mkv 2>/dev/null|wc -l)
done_ogg=$(ls normalized/*.ogg 2>/dev/null|wc -l)
done_webm=$(ls normalized/*.webm 2>/dev/null|wc -l)
done_opus=$(ls normalized/*.opus 2>/dev/null|wc -l)
done_m4a=$(ls normalized/*.m4a 2>/dev/null|wc -l)
done_count=$(($done_mp4 + $done_mkv + $done_ogg + $done_webm + $done_opus + $done_m4a))

total=$(echo $done_count + $remaining|bc)
waiting=$(echo $remaining - $running|bc)

run_norm=""
if [ $running -gt 0 ] ; then
    if [ $total -gt 0 ] ; then
        run_norm="${run_norm} $running Run = $(echo "scale=2; 100 * $running / $total" | bc ) %"
    else
        run_norm="${run_norm} $running Run"
    fi
fi

if [ $norming -gt 0 ] ; then
    run_norm="${run_norm} | ${norming}N"
fi

if [ $running -gt 0 ] || [ $norming -gt 0 ] ; then
    echo $run_norm |figlet -kct -f standard
fi

if [ $waiting -gt 0 ] ; then
    streams_waiting=""
    if [ -f ".total_streams_remaining.txt" ]; then
        streams_waiting=" | $(cat ".total_streams_remaining.txt")S"
    fi

    echo "$waiting Wait = $(echo "scale=2; 100 * $waiting / $total" | bc ) %$streams_waiting"|figlet -kct -f standard
fi
if [ $total -gt 0 ] ; then
    if [ $done_count -gt 0 ] ; then
        echo $done_count Done = $(echo "scale=2; 100 * $done_count / $total" | bc ) %|figlet -kct -f standard
    fi
fi

width=$(echo $COLUMNS / 2 | bc)
var=".list_watch_remaining_output"
rm -f $var
touch $var
find . -maxdepth 1 \( -name "*.log" \) | while read fname; do
    tail_log=$(tail -n 1 "${fname}" | sed "s,\x1B\[[0-9;]*[a-zA-Z],,g")
    echo "$tail_log ${fname}"|format_normalize_progress.py >> $var
done

export LC_ALL=C
cat $var | sed 'h;s/\x1b[[0-9;]*m//g;s/▏/ /g;s/▎/ /g;s/▍/ /g;s/▌/ /g;s/▋/ /g;s/▊/ /g;s/▉/ /g;s/█/ /g;G;s/\n/\t/' | sort | cut -f2-  # https://stackoverflow.com/a/29401114
rm -f $var

echo $PWD
screen -ls

normalize_remaining_print.py

ls_multi_folder.py normalized normalized_done normalized_temp normalized_temp_single|column -t -s $'\t'
