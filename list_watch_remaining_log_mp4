#!/usr/bin/env bash

disc_free.py

running=$(ls *.log 2>/dev/null|wc -l)
remaining_mp4=$(ls *.mp4 2>/dev/null|wc -l)
remaining_mkv=$(ls *.mkv 2>/dev/null|wc -l)
remaining_ogg=$(ls *.ogg 2>/dev/null|wc -l)
remaining_webm=$(ls *.webm 2>/dev/null|wc -l)
remaining_opus=$(ls *.opus 2>/dev/null|wc -l)
remaining_m4a=$(ls *.m4a 2>/dev/null|wc -l)
remaining=$(($remaining_mp4 + $remaining_mkv + $remaining_ogg + $remaining_webm + $remaining_opus + $remaining_m4a))
done_mp4=$(ls normalized/*.mp4 2>/dev/null|wc -l)
done_mkv=$(ls normalized/*.mkv 2>/dev/null|wc -l)
done_ogg=$(ls normalized/*.ogg 2>/dev/null|wc -l)
done_webm=$(ls normalized/*.webm 2>/dev/null|wc -l)
done_opus=$(ls normalized/*.opus 2>/dev/null|wc -l)
done_m4a=$(ls normalized/*.m4a 2>/dev/null|wc -l)
done=$(($done_mp4 + $done_mkv + $done_ogg + $done_webm + $done_opus + $done_m4a))
total=$(echo $done + $remaining|bc)
waiting=$(echo $remaining - $running|bc)

if [ $running -gt 0 ] ; then
    if [ $total -gt 0 ] ; then
        echo $running Running = $(echo "scale=2; 100 * $running / $total" | bc ) %|figlet -kct -f standard
    else
        echo $running Running|figlet -kct -f standard
    fi
fi
if [ $waiting -gt 0 ] ; then
    echo $waiting Waiting = $(echo "scale=2; 100 * $waiting / $total" | bc ) %|figlet -kct -f standard
fi
if [ $total -gt 0 ] ; then
    if [ $done -gt 0 ] ; then
        echo $done Done = $(echo "scale=2; 100 * $done / $total" | bc ) %|figlet -kct -f standard
    fi
fi

width=$(echo $COLUMNS / 2 | bc)
var="list_watch_remaining_output"
rm -f $var
touch $var
find . -maxdepth 1 \( -name "*.log" \) | while read fname; do
    tail_log=$(tail -n 1 "${fname}" | sed "s,\x1B\[[0-9;]*[a-zA-Z],,g")
    combined_line=$(echo "$tail_log @ ${fname}")
    combined_line="${combined_line/\%\|  /\%\|MM}"
    combined_line="${combined_line/\%\|/\%@\|}"
    combined_line="${combined_line/\| /\|@}"
    combined_line="${combined_line/\|MM/\|  }"
    combined_line="${combined_line/\/100 \[/\/100@\[}"
    combined_line="${combined_line/Second Pass: /0       Second Pass: }"

    combined_line="${combined_line/Stream 1\/1:/1Stream         1\/1:}"
    combined_line="${combined_line/Stream 1\/2:/2Stream        1•\/2:}"
    combined_line="${combined_line/Stream 2\/2:/1Stream        ·2\/2:}"
    combined_line="${combined_line/Stream 1\/3:/3Stream       1••\/3:}"
    combined_line="${combined_line/Stream 2\/3:/2Stream       ·2•\/3:}"
    combined_line="${combined_line/Stream 3\/3:/1Stream       ··3\/3:}"
    combined_line="${combined_line/Stream 1\/4:/4Stream      1•••\/4:}"
    combined_line="${combined_line/Stream 2\/4:/3Stream      ·2••\/4:}"
    combined_line="${combined_line/Stream 3\/4:/2Stream      ··3•\/4:}"
    combined_line="${combined_line/Stream 4\/4:/1Stream      ···4\/4:}"
    combined_line="${combined_line/Stream 1\/5:/5Stream     1••••\/5:}"
    combined_line="${combined_line/Stream 2\/5:/4Stream     ·2•••\/5:}"
    combined_line="${combined_line/Stream 3\/5:/3Stream     ··3••\/5:}"
    combined_line="${combined_line/Stream 4\/5:/2Stream     ···4•\/5:}"
    combined_line="${combined_line/Stream 5\/5:/1Stream     ····5\/5:}"
    combined_line="${combined_line/Stream 1\/6:/6Stream    1•••••\/6:}"
    combined_line="${combined_line/Stream 2\/6:/5Stream    ·2••••\/6:}"
    combined_line="${combined_line/Stream 3\/6:/4Stream    ··3•••\/6:}"
    combined_line="${combined_line/Stream 4\/6:/3Stream    ···4••\/6:}"
    combined_line="${combined_line/Stream 5\/6:/2Stream    ····5•\/6:}"
    combined_line="${combined_line/Stream 6\/6:/1Stream    ·····6\/6:}"
    combined_line="${combined_line/Stream 1\/7:/7Stream   1••••••\/7:}"
    combined_line="${combined_line/Stream 2\/7:/6Stream   ·2•••••\/7:}"
    combined_line="${combined_line/Stream 3\/7:/5Stream   ··3••••\/7:}"
    combined_line="${combined_line/Stream 4\/7:/4Stream   ···4•••\/7:}"
    combined_line="${combined_line/Stream 5\/7:/3Stream   ····5••\/7:}"
    combined_line="${combined_line/Stream 6\/7:/2Stream   ·····6•\/7:}"
    combined_line="${combined_line/Stream 7\/7:/1Stream   ······7\/7:}"
    combined_line="${combined_line/Stream 1\/8:/8Stream  1•••••••\/8:}"
    combined_line="${combined_line/Stream 2\/8:/7Stream  ·2••••••\/8:}"
    combined_line="${combined_line/Stream 3\/8:/6Stream  ··3•••••\/8:}"
    combined_line="${combined_line/Stream 4\/8:/5Stream  ···4••••\/8:}"
    combined_line="${combined_line/Stream 5\/8:/4Stream  ····5•••\/8:}"
    combined_line="${combined_line/Stream 6\/8:/3Stream  ·····6••\/8:}"
    combined_line="${combined_line/Stream 7\/8:/2Stream  ······7•\/8:}"
    combined_line="${combined_line/Stream 8\/8:/1Stream  ·······8\/8:}"
    combined_line="${combined_line/Stream 1\/9:/9Stream 1••••••••\/9:}"
    combined_line="${combined_line/Stream 2\/9:/8Stream ·2•••••••\/9:}"
    combined_line="${combined_line/Stream 3\/9:/7Stream ··3••••••\/9:}"
    combined_line="${combined_line/Stream 4\/9:/6Stream ···4•••••\/9:}"
    combined_line="${combined_line/Stream 5\/9:/5Stream ····5••••\/9:}"
    combined_line="${combined_line/Stream 6\/9:/4Stream ·····6•••\/9:}"
    combined_line="${combined_line/Stream 7\/9:/3Stream ······7••\/9:}"
    combined_line="${combined_line/Stream 8\/9:/2Stream ·······8•\/9:}"
    combined_line="${combined_line/Stream 9\/9:/1Stream ········9\/9:}"

    echo "${combined_line}" | sed \
-e 's/\[\([[:digit:]]:[[:digit:]]\+:[[:digit:]]\+\)/\[ \1/g' \
-e 's/\[\([[:digit:]]\+:[[:digit:]]\+\)/\[   \1/g' \
-e 's/<\([[:digit:]]\+:[[:digit:]]\+\),/<   \1,/g' \
-e 's/<\([[:digit:]]:[[:digit:]]\+:[[:digit:]]\+\),/< \1,/g' \
-e 's/</ < /g' -e 's/< ?,/<      ?  ,/g' \
-e 's/, ?it\/s\]/,   ?  it\/s\]/g' \
-e 's/<    00:0\([[:digit:]]\),/<        \1,/g' \
-e 's/<    00:\([[:digit:]]\+\),/<       \1,/g' \
-e 's/<    0\([[:digit:]]:[[:digit:]]\+\),/<     \1,/g' \
-e 's/<    \([[:digit:]]\+:[[:digit:]]\+\),/<    \1,/g' \
-e 's/\[   00:0\([[:digit:]]\) </\[       \1 </g' \
-e 's/\[   00:\([[:digit:]]\+\) </\[      \1 </g' \
-e 's/\[   0\([[:digit:]]:[[:digit:]]\+\) </\[    \1 </g' \
-e 's/\[   \([[:digit:]]\+:[[:digit:]]\+\) </\[   \1 </g' \
-e 's/\([[:digit:]]\)\(.*\):\( \+[[:digit:]]\+%\)/\1\3 \2:\3/g' \
-e 's/\([[:digit:]]\)   /\1  0/g' \
>> $var
    # echo "${combined_line}" >> $var
done
echo "" >> $var

#  [   01:04 <    00:17,  1.17it/s]
#  1.16s/it]    ./The Gentlemen_2019 - bonus 07.mp4.log
#   , ?it/s]        ./Willkommen bei den Sch'tis_2008 - bonus 03.mp4.log


cat $var | sort -r > var2
mv var2 $var

column -t -s "@" $var
rm -f $var

echo ""
echo $PWD
screen -ls